<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="TestResultPropertyErrorColumnNumberLabel" xml:space="preserve">
    <value>错误列号</value>
  </data>
  <data name="TestOutcomeFailed" xml:space="preserve">
    <value>未通过</value>
  </data>
  <data name="TestOutcomeSkipped" xml:space="preserve">
    <value>已跳过</value>
  </data>
  <data name="TestFailureStackTraceFormat" xml:space="preserve">
    <value>  StackTrace:
{0}</value>
  </data>
  <data name="TestResultTextMessagesFormat" xml:space="preserve">
    <value>  测试消息:
{0}</value>
  </data>
  <data name="NotificationTimeoutIsZero" xml:space="preserve">
    <value>通知超时值必须大于零。</value>
  </data>
  <data name="InvalidSettingsXmlElement" xml:space="preserve">
    <value>设置“{0}”无效。意外的 XmlElement:“{1}”。</value>
  </data>
  <data name="Exception_RegisteredTestPropertyHasDifferentValueType" xml:space="preserve">
    <value>无法将属性“{0}”注册为值类型“{1}”，因为该属性已注册为“{2}”。</value>
  </data>
  <data name="InvalidSettingsXmlAttribute" xml:space="preserve">
    <value>设置“{0}”无效。意外的 XmlAttribute:“{1}”。</value>
  </data>
  <data name="TestResultPropertyComputerNameLabel" xml:space="preserve">
    <value>计算机名称</value>
  </data>
  <data name="TestCasePropertyNameLabel" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="TestCasePropertyExecutorUriLabel" xml:space="preserve">
    <value>执行器 URI</value>
  </data>
  <data name="TestOutcomeNotFound" xml:space="preserve">
    <value>NotFound</value>
  </data>
  <data name="ConverterNotSupported" xml:space="preserve">
    <value>找不到类型 {0} 的 TypeConverter。</value>
  </data>
  <data name="TestResultPropertyDisplayNameLabel" xml:space="preserve">
    <value>TestResult 显示名称</value>
  </data>
  <data name="NullString" xml:space="preserve">
    <value>(null)</value>
  </data>
  <data name="MissingDataCollectorAttributes" xml:space="preserve">
    <value>数据收集器设置无效。缺少所需的特性“{0}”。典型数据收集器设置将类似于 &lt;DataCollector uri="dataCollector://Samples/SampleCollector/1.0" assemblyQualifiedName="Samples.SampleCollector.SampleDataCollector, SampleCollectors, Version=1.0.0.0, Culture=neutral, PublicKeyToken=1111111111111111" friendlyName="sampleCollector"&gt;。</value>
  </data>
  <data name="TestResultPropertyErrorMessageLabel" xml:space="preserve">
    <value>错误消息</value>
  </data>
  <data name="TestCasePropertyFilePathLabel" xml:space="preserve">
    <value>文件路径</value>
  </data>
  <data name="TestFailureMessageFormat" xml:space="preserve">
    <value>  消息: {0}</value>
  </data>
  <data name="TestResultPropertyOutcomeLabel" xml:space="preserve">
    <value>结果</value>
  </data>
  <data name="TestResultMessageFormat" xml:space="preserve">
    <value>  {0}:
{1}</value>
  </data>
  <data name="TestCasePropertyFullyQualifiedNameLabel" xml:space="preserve">
    <value>FullyQualifiedName</value>
  </data>
  <data name="NoTestCaseFilterForSpecificTests" xml:space="preserve">
    <value>无法为特定测试运行指定 TestCaseFilter。FilterCriteria 仅适用于与源一起运行。</value>
  </data>
  <data name="TestResultPropertyErrorStackTraceLabel" xml:space="preserve">
    <value>错误堆栈跟踪</value>
  </data>
  <data name="BasicTestResultFormat" xml:space="preserve">
    <value>{0,-10}  {1}</value>
  </data>
  <data name="TestResultPropertyStartTimeLabel" xml:space="preserve">
    <value>开始时间</value>
  </data>
  <data name="TestResultPropertyDurationLabel" xml:space="preserve">
    <value>持续时间</value>
  </data>
  <data name="TestCasePropertyIdLabel" xml:space="preserve">
    <value>ID</value>
  </data>
  <data name="TestCasePropertySourceLabel" xml:space="preserve">
    <value>源</value>
  </data>
  <data name="NotificationFrequencyIsNotPositive" xml:space="preserve">
    <value>通知频率必须为正值。</value>
  </data>
  <data name="CouldNotFindXmlNode" xml:space="preserve">
    <value>无法找到“{0}”节点</value>
  </data>
  <data name="TestCasePropertyLineNumberLabel" xml:space="preserve">
    <value>行号</value>
  </data>
  <data name="TestCasePropertyColumnNumberLabel" xml:space="preserve">
    <value>列号</value>
  </data>
  <data name="UnexpectedTypeOfProperty" xml:space="preserve">
    <value>不支持属性“{1}”的测试属性类型“{0}”。请使用一种支持的类型属性(基元类型、URI、字符串和 string[])，然后重试。</value>
  </data>
  <data name="TestOutcomePassed" xml:space="preserve">
    <value>已通过</value>
  </data>
  <data name="InvalidRunSettingsRootNode" xml:space="preserve">
    <value>必须将运行设置的根节点命名为“RunSettings”。</value>
  </data>
  <data name="TestResultPropertyEndTimeLabel" xml:space="preserve">
    <value>结束时间</value>
  </data>
  <data name="TestOutcomeNone" xml:space="preserve">
    <value>无</value>
  </data>
  <data name="InvalidSettingsIncorrectValue" xml:space="preserve">
    <value>设置“{0}”无效。为“{2}”指定的值“{1}”无效。</value>
  </data>
</root>